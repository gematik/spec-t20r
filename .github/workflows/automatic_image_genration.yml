name: Automatic Image Generation

on:
  push:
    paths:
      - 'src/plantuml/**'
      - 'src/drawio/**'
      - '.github/workflows/generate_images.yml'
  workflow_dispatch:

jobs:
  generate_images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends graphviz xvfb
        # Install drawio via snap - try with --classic again, maybe it helps Snap path access slightly
        sudo snap install drawio --classic
        sleep 5

    - name: Download PlantUML jar
      id: download_plantuml
      run: |
        wget https://github.com/plantuml/plantuml/releases/latest/download/plantuml.jar -O /tmp/plantuml.jar
        if [ ! -f /tmp/plantuml.jar ]; then
          echo "ERROR: Failed to download plantuml.jar"
          exit 1
        fi
        echo "PlantUML JAR downloaded."

    - name: Generate images from PlantUML files
      id: generate_plantuml
      run: |
        set -e # Keep this, but we'll check exit codes manually too
        GENERATED_COUNT=0
        SUCCESSFUL_GENERATIONS=0
        FAILED_GENERATIONS=0
        shopt -s nullglob # Ensure loop doesn't run if find returns nothing

        echo "Starting PlantUML generation..."
        while IFS= read -r -d $'\0' file; do
          echo "--- Processing PlantUML file: $file ---"
          output_dir="$PWD/$(dirname "$file" | sed 's|^src/plantuml|images|')"
          image_base=$(basename "$file" .puml)
          png_path="$output_dir/$image_base.png"
          svg_path="$output_dir/$image_base.svg"
          should_generate=false
          generation_reason=""

          # Determine reason for generation
          if [ ! -f "$png_path" ]; then
              should_generate=true
              generation_reason="PNG missing"
          elif [ ! -f "$svg_path" ]; then
              should_generate=true
              generation_reason="SVG missing"
          elif [ "$file" -nt "$png_path" ]; then
              should_generate=true
              generation_reason="Source newer than PNG"
          elif [ "$file" -nt "$svg_path" ]; then
              should_generate=true
              generation_reason="Source newer than SVG"
          fi

          if [ "$should_generate" = true ]; then
            echo "-> Generating images for $file (Reason: $generation_reason)"
            mkdir -p "$output_dir"
            GENERATED_COUNT=$((GENERATED_COUNT + 1)) # Count attempts

            # Generate PNG with explicit error checking
            echo "   Generating PNG..."
            if java -jar /tmp/plantuml.jar -tpng "$file" -o "$output_dir"; then
              echo "   PNG command executed."
            else
              echo "   ERROR: PNG generation command failed for $file (Exit Code: $?)" >&2
            fi

            # Generate SVG with explicit error checking
            echo "   Generating SVG..."
            if java -jar /tmp/plantuml.jar -tsvg "$file" -o "$output_dir"; then
               echo "   SVG command executed."
            else
               echo "   ERROR: SVG generation command failed for $file (Exit Code: $?)" >&2
            fi

            # Verify files were created AFTER commands ran
            if [ -f "$png_path" ] && [ -f "$svg_path" ]; then
               echo "   SUCCESS: Both PNG and SVG files exist for $file."
               SUCCESSFUL_GENERATIONS=$((SUCCESSFUL_GENERATIONS + 1))
            else
               echo "   ERROR: One or both output files missing after generation attempt for $file." >&2
               FAILED_GENERATIONS=$((FAILED_GENERATIONS + 1))
               # Optional: Fail the step if any generation fails
               # exit 1
            fi
          else
            echo "-> Images for $file are up-to-date."
          fi
        done < <(find src/plantuml -name "*.puml" -print0) # Use process substitution

        echo "--- PlantUML Summary ---"
        echo "Attempted Generations: $GENERATED_COUNT"
        echo "Successful Generations: $SUCCESSFUL_GENERATIONS"
        echo "Failed Generations: $FAILED_GENERATIONS"

        # Set output flag based on SUCCESSFUL generations
        if [ "$SUCCESSFUL_GENERATIONS" -gt 0 ]; then
          echo "plantuml_generated=true" >> $GITHUB_OUTPUT
        else
          echo "plantuml_generated=false" >> $GITHUB_OUTPUT
        fi

        # Fail step if there were failures?
        # if [ "$FAILED_GENERATIONS" -gt 0 ]; then
        #   exit 1
        # fi
      shell: bash

    - name: Generate images from drawio files
      id: generate_drawio
      run: |
        set -e # Keep this
        GENERATED_COUNT=0
        SUCCESSFUL_GENERATIONS=0
        FAILED_GENERATIONS=0
        shopt -s nullglob # Ensure loop doesn't run if find returns nothing

        echo "Starting Draw.io generation..."
        while IFS= read -r -d $'\0' file; do
          echo "--- Processing drawio file: $file ---"
          # Use absolute paths for input and output directory creation
          abs_file="$PWD/$file"
          output_dir="$PWD/$(dirname "$file" | sed 's|^src/drawio|images|')"
          image_base=$(basename "$file" .drawio)
          png_path="$output_dir/$image_base.png"
          svg_path="$output_dir/$image_base.svg"
          should_generate=false
          generation_reason=""

          # Check if absolute source file exists (early check)
          if [ ! -f "$abs_file" ]; then
              echo "   ERROR: Absolute source file path not found: $abs_file" >&2
              FAILED_GENERATIONS=$((FAILED_GENERATIONS + 1))
              continue # Skip this file
          fi

          # Determine reason for generation
          if [ ! -f "$png_path" ]; then
              should_generate=true
              generation_reason="PNG missing"
          elif [ ! -f "$svg_path" ]; then
              should_generate=true
              generation_reason="SVG missing"
          elif [ "$abs_file" -nt "$png_path" ]; then
              should_generate=true
              generation_reason="Source newer than PNG"
          elif [ "$abs_file" -nt "$svg_path" ]; then
              should_generate=true
              generation_reason="Source newer than SVG"
          fi

          if [ "$should_generate" = true ]; then
            echo "-> Generating images for $abs_file (Reason: $generation_reason)"
            mkdir -p "$output_dir"
            GENERATED_COUNT=$((GENERATED_COUNT + 1)) # Count attempts
            drawio_success=true

            # Generate PNG with explicit error checking and absolute input path
            echo "   Generating PNG: $png_path"
            if xvfb-run --auto-servernum drawio --no-sandbox --disable-gpu --export --format png --output "$png_path" "$abs_file"; then
              echo "   PNG command executed successfully."
            else
              echo "   ERROR: PNG generation command failed for $abs_file (Exit Code: $?)" >&2
              drawio_success=false
            fi

            # Generate SVG with explicit error checking and absolute input path
            echo "   Generating SVG: $svg_path"
            if xvfb-run --auto-servernum drawio --no-sandbox --disable-gpu --export --format svg --output "$svg_path" "$abs_file"; then
              echo "   SVG command executed successfully."
            else
              echo "   ERROR: SVG generation command failed for $abs_file (Exit Code: $?)" >&2
              drawio_success=false
            fi

            # Verify files were created AFTER commands ran
            # Only increment SUCCESS if both commands seemed to succeed AND files exist
            if [ "$drawio_success" = true ] && [ -f "$png_path" ] && [ -f "$svg_path" ]; then
               echo "   SUCCESS: Both PNG and SVG files exist for $file."
               SUCCESSFUL_GENERATIONS=$((SUCCESSFUL_GENERATIONS + 1))
            else
               echo "   ERROR: Command failed or one or both output files missing after generation attempt for $file." >&2
               FAILED_GENERATIONS=$((FAILED_GENERATIONS + 1))
               # Optional: Fail the step if any generation fails
               # exit 1
            fi
          else
            echo "-> Images for $file are up-to-date."
          fi
        done < <(find src/drawio -name "*.drawio" -print0) # Use process substitution

        echo "--- Draw.io Summary ---"
        echo "Attempted Generations: $GENERATED_COUNT"
        echo "Successful Generations: $SUCCESSFUL_GENERATIONS"
        echo "Failed Generations: $FAILED_GENERATIONS"

        # Set output flag based on SUCCESSFUL generations
        if [ "$SUCCESSFUL_GENERATIONS" -gt 0 ]; then
          echo "drawio_generated=true" >> $GITHUB_OUTPUT
        else
          echo "drawio_generated=false" >> $GITHUB_OUTPUT
        fi

        # Fail step if there were failures?
        # if [ "$FAILED_GENERATIONS" -gt 0 ]; then
        #  exit 1
        # fi
      shell: bash

    - name: Show Git Status for Images
      run: |
        echo "--- Git Status for images directory ---"
        git status --porcelain images || echo "No changes or untracked files in images directory."
        echo "--- Listing images directory ---"
        ls -R images || echo "Images folder does not exist or is empty."

    - name: Commit and push generated images
      # Only run if generation steps reported success
      if: steps.generate_plantuml.outputs.plantuml_generated == 'true' || steps.generate_drawio.outputs.drawio_generated == 'true'
      run: |
        echo "Checking for changes in 'images' directory to commit..."
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

        # Stage ALL changes within the 'images' directory
        git add images

        # Check if there's anything staged within the 'images' pathspec
        if git diff --staged --quiet -- images; then
          echo "No staged changes detected in 'images' directory after 'git add'. Nothing to commit."
          exit 0
        fi

        echo "Staged changes found. Committing..."
        git commit -m "chore: Generate/update images from source files" -m "Generated by GitHub Action."

        echo "Pushing changes..."
        # Add retry logic for potential transient push failures
        git push || (sleep 5 && git pull --rebase && git push)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}