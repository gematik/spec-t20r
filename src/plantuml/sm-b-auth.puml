@startuml "SM-B_Auth_with_DPoP"
autonumber "[00]"
skinparam defaultFontSize 10
skinparam defaultFontName Helvetica
skinparam DefaultMonospacedFontName Courier
skinparam lengthAdjust none

!pragma teoz true

participant Client
box "LEI" #GhostWhite
    participant Konnektor as "Konnektor or\nTI-Gateway"
    participant SMB as "SM-B"
end box

box "Betreiber" #TECHNOLOGY
    box "ZT Cluster" #SandyBrown
        participant AuthS as "PEP\nAuthorization Server" 
        participant HP as "http Proxy"
        participant PDP as "PDP"
    endbox
    box TI 2.0 Dienst #DarkSeaGreen
        participant RS as "Resource Server"
    endbox
end box

activate Client
alt #White
    Client -> HP: GET /resource
    activate HP
    HP --> Client: 401 Unauthorized; json body with Well-Known json Document (RFC8414)
    deactivate HP
else 
    Client -> HP: GET /.well-known/oauth-authorization-serverÂ 
    activate HP
    HP --> Client: 200 OK; json body with Well-Known json Document (RFC8414)
    deactivate HP
end

Client -> Client: generate DPoP keypair
alt Client Assertion JWT
Client -> AuthS: GET /nonce
activate AuthS
AuthS --> Client: return 200 OK new-nonce: nonce
Client -> Client: create Client Assertion JWT with nonce\n  Client and OS Information\n  DPoP Thumbprint
Client -> Konnektor: externalAuthenticate JWT-hash
activate Konnektor
Konnektor -> SMB: sign JWT-hash
activate SMB
SMB -> Konnektor: JWT-Signature
deactivate SMB
Konnektor -> Client: JWT-signature
deactivate Konnektor

Client -> Client: add SM-B Signature to Client Assertion JWT\n\
cC4h... (Client Assertion JWT)
Client -> Client: create DPoP Proof JWT
Client -> AuthS: POST /token\n\
  (Client Assertion JWT and DPoP JWT)\n\
  ""DPoP: eyJh...""\n\
  ""grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer""\n\
  ""assertion=cC4h...""\n\
  ""scope=...""
note left of AuthS
  RFC7523 (JWT Client Assertion), RFC9449 (DPoP)
end note
AuthS -> AuthS: verify Client Assertion JWT, DPoP
AuthS -> AuthS: Create state for Identity/App/Device
else Use Refresh token
Client -> AuthS: POST /token\n\
  (Refresh token and DPoP JWT)\n\
  ""grant_type=refresh_token""\n\
  ""refresh_token=eyJ0...""\n\
  ""scope=...""\n\
  ""DPoP: eyJh...""
AuthS -> AuthS: verify Refresh token, DPoP
end

AuthS -> PDP: POST /v1/data/authz, json body {  "input": {...}} 
activate PDP
PDP --> AuthS: 200 OK, json body {"result": {"allow": true, ...}}
deactivate PDP
AuthS -> AuthS: issue tokens
AuthS --> Client: 200 OK, access token, refresh token, bound to DPoP
deactivate AuthS
Client -> Client: Create DPoP Proof for RS

Client -> HP: GET /resource (access token, DPoP)
activate HP
HP -> HP: verify access token and\nDPoP Binding
HP -> RS: forward GET /resource\n\
(access token, DPoP)
activate RS
RS -> RS: provide\n\
resource\n\
access
RS --> HP: 200 OK, resource
deactivate RS
HP --> Client: 200 OK, resource
deactivate HP
deactivate RS
deactivate Client

@enduml