@startuml "SM-B_Auth_with_DPoP"
autonumber "[00]"
skinparam defaultFontSize 10
skinparam defaultFontName Helvetica
skinparam DefaultMonospacedFontName Courier
skinparam lengthAdjust none

!pragma teoz true

participant Client
box "LEI" #GhostWhite
    participant Konnektor
    participant SMB as "SM-B"
end box

box "Betreiber" #TECHNOLOGY
    box "ZT Cluster" #SandyBrown
        participant AuthS as "PEP\nAuthorization Server" 
        participant HP as "http Proxy"
        participant PDP as "PDP"
    endbox
    box TI 2.0 Dienst #DarkSeaGreen
        participant RS as "Resource Server"
    endbox
end box

activate Client


alt #White
    Client -> HP: GET /resource
    activate HP
    HP --> Client: 401 Unauthorized; json body with Well-Known json Document
    deactivate HP
else 
    Client -> AuthS: GET /.well-known/oauth-authorization-serverÂ 
    activate AuthS
    AuthS --> Client: 200 OK; json body with Well-Known json Document
end

Client -> Client: generate DPoP keypair
Client -> AuthS: GET /nonce
AuthS --> Client: return 200 OK new-nonce: nonce
Client -> Client: create JWT with\n  nonce\n  Client and OS Information\n  DPoP Thumbprint
Client -> Konnektor: externalAuthenticate JWT-hash
activate Konnektor
Konnektor -> SMB: sign JWT-hash
activate SMB
SMB -> Konnektor: JWT-Signature
deactivate SMB
Konnektor -> Client: JWT-signature
deactivate Konnektor

Client -> Client: create SM-B signed JWT
Client -> Client: create DPoP Proof
Client -> AuthS: POST /token\n\
  {SM-B signed JWT}\n\
  ""DPoP: eyJh...""\n\
  ""grant_type=authorization_code""\n\
  ""code=...""\n\
  ""client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer""\n\
  ""client_assertion=eyJh....""
note left of AuthS
  RFC7523 (JWT Client Assertion), RFC9449 (DPoP)
end note

AuthS -> AuthS: verify Client Assertion, DPoP
AuthS -> PDP: POST /v1/data/authz, json body {  "input": {...}} 
PDP --> AuthS: 200 OK, json body {"result": {"allow": true, ...}}
AuthS -> AuthS: issue tokens
AuthS -> Client: 200 OK, access token, refresh token, bound to DPoP
deactivate AuthS
Client -> Client: Create DPoP Proof for RS

Client -> HP: GET /resource (access token, DPoP)
activate HP
HP -> HP: verify access token and\nDPoP Binding
HP -> RS: forward
activate RS
RS -> RS: provide resource access
RS -> HP: resource
deactivate RS
HP -> Client: resource
deactivate HP
deactivate RS
deactivate Client

@enduml