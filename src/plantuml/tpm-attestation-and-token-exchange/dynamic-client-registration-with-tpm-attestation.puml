@startuml "dynamic-client-registration-with-tpm-attestation"
autonumber "(00)"
skinparam defaultFontSize 10
skinparam defaultFontName Helvetica
skinparam DefaultMonospacedFontName Courier
skinparam lengthAdjust none
skinparam sequenceReferenceBackgroundColor White
skinparam SequenceReferenceFontSize 12
/'skinparam SequenceReferenceFontStyle bold
'/

!pragma teoz true

box "LEI" #GhostWhite
  box "PrimÃ¤rsystem" #Lavender
    box "ZETA Client" #SandyBrown
      participant Client as "ZETA\nClient"
    end box
    participant ZAS as "ZETA Attestation Service\n(Admin rights)"
    participant TPM as "TPM"
  end box
end box

box "Anbieter" #TECHNOLOGY
  box "ZETA Guard" #SandyBrown
    participant AuthS as "PDP\nAuthorization Server" 
    participant PDPDB as "PDP DB"
  end box
    box TI 2.0 Dienst #DarkSeaGreen
      participant RS as "Resource\nServer"
    end box
end box

Client ++
alt Client has no client_id
  Client -> Client : Generate Client Instance\nKey Pair (for Client Auth)
  note right: Key Pair for private_key_jwt \n(could potentially be TPM-backed, but distinct from Attestation Key)
  Client -> AuthS ++ : GET /nonce
  AuthS --> Client --: return 200 OK new-nonce: nonce

  alt ZETA Attestation Service available
    Client -> ZAS ++ : Get Attestation
    alt ZETA TPM Service has no TPM Attestation Key
      ZAS -> TPM ++ : Generate Attestation Key Pair
      TPM --> ZAS: Return Attestation Public Key
      ZAS -> TPM: Get Certificate Chain
      TPM --> ZAS: Return Certificate Chain    
      ZAS -> ZAS: Store AK Handle, AK Public Key\nand Certificate Chain
    end

    ZAS -> ZAS: Select AK Handle
    ZAS -> ZAS: Get TCG Event Log (from OS/Firmware)
    ZAS -> TPM: Get TPM Quote for PCRs (4, 5, 7, 10, 11, 22 oder 23)\nand nonce, signed with AK
    note right: PCR 4: Boot Loader Code, Digest\nPCR 5: Boot Loader Configuration, Digest\nPCR 7: Secure Boot State / Policy, Digest\nPCR   10:OS Kernel / IMA, Digest\nPCR 11: OS Components / VSM, Digest,\nPCR 22 oder 23 (wenn frei) App Data (ID, Version,\nSignature Hash),   Digest
    TPM --> ZAS --: Return TPM Quote
    note right: Quote contains:\n- nonce\n- Attested Data (PCR Select, PCR Digest),\n- Signature
    ZAS --> Client --: Return Attestation
    Client -> Client: Create Client Statement\nwith posture-tpm
  else ZETA Attestation 'Service is not available
    Client -> Client: Create Client Statement\nwith posture-software
  end
  note right: Attestation Statement includes:\n- product_id\n- product_version\n- posture\n- attestation


  Client -> AuthS ++ : POST /register (RFC 7591)
  note right of Client #lightblue
      **DCR Request Body:**
      {
        "redirect_uris": ["..."],
        "client_name": "...",
        "token_endpoint_auth_method": "private_key_jwt",
        "grant_types": ["urn:ietf:params:oauth:grant-type:token-exchange","refresh_token"],
        "jwks": { "keys": [ <Client_Instance_Public_Key_JWK> ] },
        "nonce": "<nonce>", // Replay protection
        // Custom parameter for attestation:
        "urn:gematik:params:oauth:client-attestation-type:tpm2": {
           "client_statement": "<Base64(Client Statement)>",
           "client_statement_format": "client-statement-jwt"
         }
      }
  end note
  AuthS -> AuthS : Validate nonce
  AuthS -> AuthS : Validate TPM\nAttestation
  note right: Check signature against trusted roots\n(https://go.microsoft.com/fwlink/?linkid=2097925).\nExtract device/OS/App status.\nVerify Attestation Key properties.
  alt Attestation valid
    AuthS -> PDPDB ++ : Check if Client\nalready exists
    PDPDB --> AuthS:
    note right of PDPDB
      Check if client_id already exists in DB for
      - Client_Instance_Public_Key_JWK
    end note
    alt Client exists in DB
      AuthS --> Client : 409 Conflict
    else
      AuthS -> AuthS : Generate client_id
      AuthS -> PDPDB: Store client metadata,\nincl. Client Instance Key
      note right of PDPDB
        Store client metadata in DB:
        - client_id
        - client_instance_key
        - attestation_data
        - attestation_key
        - redirect_uris
        - client_name
        - token_endpoint_auth_method
        - grant_types
        - state // Client registered but not yet activated
      end note
      PDPDB --> AuthS --: 201 Created
    end
    AuthS -->> Client: 201 Created
    note right of Client #lightgreen
        **DCR Response Body:**
        {
          "client_id": "<generated-client-id>",
          "client_id_issued_at": ...,
          "client_name": "...",
          "token_endpoint_auth_method": "private_key_jwt",
          "grant_types": ["urn:ietf:params:oauth:grant-type:token-exchange","refresh_token"],
          "jwks": { <Client_Instance_Public_Key_JWK> }, // Confirming registered key
          // ... other registered metadata
          "registration_access_token": "...", // Optional for config updates
          "registration_client_uri": "..." // Optional for config updates
        }
    end note
  else Attestation invalid
    AuthS -->> Client -- : 400 Bad Request
  end

  Client --
end

@enduml