@startuml "dynamic-client-registration-with-tpm-attestation"
autonumber "(00)"
skinparam defaultFontSize 10
skinparam defaultFontName Helvetica
skinparam DefaultMonospacedFontName Courier
skinparam lengthAdjust none
skinparam sequenceReferenceBackgroundColor White
skinparam SequenceReferenceFontSize 12
/'skinparam SequenceReferenceFontStyle bold
'/

!pragma teoz true

Actor User
box "LEI" #GhostWhite
  box "PrimÃ¤rsystem" #Lavender
    box "ZETA Client" #SandyBrown
      participant Client as "ZETA\nClient"
    end box
    participant TPM as "TPM"
  end box
end box

box "Anbieter" #TECHNOLOGY
  box "ZETA Guard" #SandyBrown
    participant AuthS as "PDP\nAuthorization Server" 
    participant PDPDB as "PDP DB"
  end box
    box TI 2.0 Dienst #DarkSeaGreen
      participant RS as "Resource\nServer"
    end box
end box

Client ++
alt Client has no client_id
  Client -> Client : Generate Client Instance Key Pair (for Client Auth)
  note right: Key Pair for private_key_jwt \n(could potentially be TPM-backed, but distinct from Attestation Key)
  Client -> AuthS ++ : GET /nonce
  AuthS --> Client --: return 200 OK new-nonce: nonce

  alt Client has no TPM Attestation Key
    Client -> User ++ : Obtain Admin\naccess to TPM
    User --> Client -- : TPM Admin access
    Client -> TPM ++ : Trigger Generation of TPM Attestation Key Pair
    TPM --> Client: Return Attestation Public Key / Certificate Chain
  else
    Client -> TPM: Load existing TPM Attestation Key
    TPM --> Client: Return Attestation Public Key / Certificate Chain
  end

  Client -> Client: Get TCG Event Log (from OS/Firmware)
  note right: Trusted Computing Group Event Log contains:\n- Device identifiers\n- Boot state, Verified Boot state\n- OS Version, Patch Level\n- (optional with WDAC) App ID, App Version, App Signature Hash
  Client -> TPM: Get TPM Quote for PCRs 0, 1, 2 (with nonce, signed with AIK)
  TPM --> Client --: Return Quote
  note right: Quote contains:\n- Signed nonce\n- Device identifiers\n- Boot state, Verified Boot state\n- OS Version, Patch Level\n- App ID, App Version, App Signature Hash

  Client -> Client: Create Client Statement
  note right: Attestation Statement includes:\n- Signed nonce\n- Device identifiers\n- Boot state, Verified Boot state\n- OS Version, Patch Level\n- App ID, App Version, App Signature Hash

  Client -> AuthS ++ : POST /register (RFC 7591)
  note right of Client #lightblue
      **DCR Request Body:**
      {
        "redirect_uris": ["..."],
        "client_name": "...",
        "token_endpoint_auth_method": "private_key_jwt",
        "grant_types": ["urn:ietf:params:oauth:grant-type:token-exchange","refresh_token"],
        "jwks": { "keys": [ <Client_Instance_Public_Key_JWK> ] },
        "nonce": "<nonce>", // Replay protection
        // Custom parameter for attestation:
        "urn:gematik:params:oauth:client-attestation-type:tpm2": {
           "attestation_data": "<Base64(TPM Attestation Statement)>",
           "attestation_format": "tpm-attestation-jwt"
         }
      }
  end note
  AuthS -> AuthS : Validate nonce
  AuthS -> AuthS : Validate TPM\nAttestation Statement
  note right: Check signature against trusted roots.\nExtract device/OS/App status.\nVerify Attestation Key properties.
  alt Attestation valid
    AuthS -> PDPDB ++ : Check if Client already exists
    PDPDB --> AuthS:
    note right of PDPDB
      Check if client_id already exists in DB for
      - Client_Instance_Public_Key_JWK
    end note
    alt Client exists in DB
      AuthS --> Client : 409 Conflict
    else
      AuthS -> AuthS : Generate client_id
      AuthS -> PDPDB: Store client metadata,\nincl. Client Instance Key
      note right of PDPDB
        Store client metadata in DB:
        - client_id
        - client_instance_key
        - attestation_data
        - attestation_key
        - redirect_uris
        - client_name
        - token_endpoint_auth_method
        - grant_types
        - state // Client registered but not yet activated
      end note
      PDPDB --> AuthS --: 201 Created
    end
    AuthS -->> Client: 201 Created
    note right of Client #lightgreen
        **DCR Response Body:**
        {
          "client_id": "<generated-client-id>",
          "client_id_issued_at": ...,
          "client_name": "...",
          "token_endpoint_auth_method": "private_key_jwt",
          "grant_types": ["urn:ietf:params:oauth:grant-type:token-exchange","refresh_token"],
          "jwks": { <Client_Instance_Public_Key_JWK> }, // Confirming registered key
          // ... other registered metadata
          "registration_access_token": "...", // Optional for config updates
          "registration_client_uri": "..." // Optional for config updates
        }
    end note
  else Attestation invalid
    AuthS -->> Client -- : 400 Bad Request
  end

  Client --
end

@enduml