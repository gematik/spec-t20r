@startuml "native_client_attestation_oidc_and_oauth"

skinparam defaultFontSize 10
skinparam DefaultMonospacedFontName Courier
skinparam lengthAdjust none

skinparam sequence {
  ParticipantBorderColor black
  ParticipantBackgroundColor white
  ActorBorderColor black
  ActorBackgroundColor white
  ArrowColor black
  LifeLineBorderColor black
  LifeLineBackgroundColor #F0F0F0
  NoteBorderColor black
  NoteBackgroundColor #FEFECE
}

!pragma teoz true

Actor User
box "Mobile Device" #GhostWhite
    participant UserAgent as "User Agent"
    participant MUA as "Mail\nUser Agent"
    participant Client as "Client"
    participant AndroidTEE as "Android TEE"
end box

box "Anbieter" #TECHNOLOGY
    box "ZETA Guard" #SandyBrown
        participant AuthS as "PDP\nAuthS"
        participant PEP as "PEP\nHTTP Proxy"
        participant PEA as "PDP\nPolicy Engine"
    end box
    box "TI 2.0\nDienst" #DarkSeaGreen
        participant RS as "Resource\nServer"
    end box
end box

participant "Attestation\nService" as AttService
participant "IDP" as IDP
participant "Federation \nMaster" as FedMaster

== Client Registration (with Client Attestation and Email) ==

User -> Client: User Starts Registration
activate Client
alt Android Attestation
    Client -> AndroidTEE: Generate Key Pair\nfor Attestation
    activate AndroidTEE
    note right: Using Android TEE or iOS Secure Enclave
    AndroidTEE --> Client: Public Key
    deactivate AndroidTEE
    Client -> AttService: Request Attestation Challenge
    activate AttService
    AttService --> Client: Attestation Challenge
    deactivate AttService
    Client -> AndroidTEE: Sign Challenge with\nAttestation Key
    activate AndroidTEE
    note right: Using Android SafetyNet/Play Integrity or\niOS DeviceCheck/App Attest API
    AndroidTEE --> Client: Attestation Statement
    deactivate AndroidTEE
else iOS Attestation
    Client -> Client:
    note right: iOS Attestation with App Attest API or\nDeviceCheck API
end
Client -> AuthS: Client Registration Request
note right: client_instance.yaml\nIncludes attestation statement, public key,\nUser Email and software statement
activate AuthS
AuthS -> AttService: Verify Client Attestation
activate AttService
note right: AS A forwards attestation data\nto Attestation Service
AttService -> AttService: Validate Attestation\nStatement
AttService --> AuthS: Attestation Verification Result
AuthS -> AuthS: Verify Email Confirmation JWT
deactivate AttService
alt Email Confirmation Required
    AuthS -> AuthS: Generate Confirmation\nLink and send Email
    activate MUA
    MUA -> MUA: Receive Email
    User -> MUA: Click Confirmation\nLink in Email
    MUA -> UserAgent: Open\nConfirmation\nLink
    activate UserAgent
    deactivate MUA
    UserAgent -> AuthS: Email Confirmation\nRequest
    deactivate UserAgent
    AuthS -> AuthS: Verify Email\nConfirmation\nRequest
    AuthS -> AuthS: Generate Email\nConfirmation JWT
    note right: JWT Claims:\n - iss: AS_A_ID\n - sub: Client_id\n - aud: (all AS)\n - exp: (Policy Engine decision)\n - iat: (now)\n - Email_verified: true
    AuthS -> PEA: Request Client\nRegistration Decision
    activate PEA
    note right: AS A sends input data to Policy Engine A\nfor registration request
    PEA -> PEA: Evaluate Policy based\non Input Data
    PEA --> AuthS: Client Registration\nDecision (Permit/Deny)
    deactivate PEA
    AuthS --> Client: Client Registration Response\n(client_id, Email Confirmation JWT)
    deactivate AuthS
    else Email Confirmation already done
    AuthS -> PEA: Request Client\nRegistration Decision
    activate PEA
    note right: AS A sends input data to Policy Engine A\nfor registration request
    PEA -> PEA: Evaluate Policy based\non Input Data
    PEA --> AuthS: Client Registration\nDecision (Permit/Deny)
    deactivate PEA
    AuthS --> Client: Client Registration Response\n(client_id)
end
deactivate AuthS

== OAuth 2.0 Authorization Code Flow with PAR, PKCE and DPoP ==
Client -> Client: Generate PKCE\nCode Verifier
Client -> Client: Generate PKCE\nCode Challenge
Client -> Client: Generate DPoP Key Pair
Client -> AuthS: PAR Request\n(client_id, redirect_uri, scope, etc., dpop_jkt)
activate AuthS
note right: Authorization Code Request\n(inkl. DPoP Proof, code_challenge, code_challenge_method, redirect_uri)
AuthS -> AuthS: Validate DPoP Proof
AuthS --> Client: Request URI
deactivate AuthS

Client -> UserAgent: Navigate to Request URI
activate UserAgent
UserAgent -> AuthS: Authorization Request (with Request URI)
activate AuthS
    AuthS -> IDP: PAR Request (OpenID Connect), redirect_uri, client_id_idpsek
activate IDP
note right: AS A acts as Relying Party\n for the IDP\n(client_id_idpsek)
    IDP --> AuthS: PAR Response, request_uri, expires_in
    AuthS --> UserAgent: Redirect to IDP, request_uri
    UserAgent -> IDP: Navigate to request_uri
    IDP --> UserAgent: Authentication Prompt, consent
    UserAgent -> IDP: User Credentials, consent
    IDP --> UserAgent: Redirect to AuthS, auth_code, redirect_uri
    UserAgent -> AuthS: Redirect to AuthS, auth_code, redirect_uri
    AuthS -> IDP: Token Request (Authorization Code Grant), auth_code
    IDP -> IDP: Validate\nAuthorization\nCode
IDP --> AuthS: Authentication Response (ID Token)
deactivate IDP
    AuthS -> AuthS: Validate\nID Token
    AuthS --> UserAgent: Authorization Code
    UserAgent -> Client: Redirect with Authorization Code
deactivate UserAgent

Client -> Client: Generate\nDPoP Proof JWT
Client -> AuthS: Token Request (Authorization Code Grant)
note right: EnthÃ¤lt Authorization Code, DPoP Proof,\nclient_id, redirect_uri, code_verifier
AuthS -> AuthS: Validate\nAuthorization Code
AuthS -> AuthS: Validate DPoP Proof
AuthS -> AuthS: Validate PKCE\nCode Verifier
AuthS -> PEA: Request Token Issuance Decision
activate PEA
note right: AS A sends input data to Policy Engine A\nfor token request
PEA -> PEA: Evaluate Policy based\non Input Data
PEA --> AuthS: Token Issuance Decision (Permit/Deny)
deactivate PEA
    AuthS --> Client: Access Token, Refresh Token
note left: Access Token bound to\nclient's DPoP public key
deactivate AuthS

Client -> Client: Generate DPoP Token
Client -> PEP: Access Protected Resource\n(with Access Token and DPoP Proof)
activate PEP
PEP -> PEP: Validate Access Token\nand DPoP Proof
PEP -> RS: Forward Request to\nResource Server A
activate RS
RS --> PEP: Resource Data
PEP --> Client: Resource Data
deactivate PEP
deactivate RS

@enduml