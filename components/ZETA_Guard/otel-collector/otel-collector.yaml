apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: vsdm2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:latest
        command: ["/otelcol-contrib", "--config=/etc/otel-collector-config.yaml"]
        volumeMounts:
        - name: otel-collector-config-vol
          mountPath: /etc/otel-collector-config.yaml
          subPath: otel-collector-config.yaml
        ports:
        - containerPort: 4317 # OTLP gRPC
          name: otlp-grpc
        - containerPort: 4318 # OTLP HTTP
          name: otlp-http
      volumes: # Hinzugef√ºgter Volumes-Abschnitt
      - name: otel-collector-config-vol
        configMap:
          name: otel-collector-config
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector-svc
  namespace: vsdm2
spec:
  selector:
    app: otel-collector
  ports:
  - protocol: TCP
    port: 4317
    targetPort: 4317
    name: otlp-grpc
  - protocol: TCP
    port: 4318
    targetPort: 4318
    name: otlp-http
  - protocol: TCP  # <----- Add this port definition
    port: 9090      # <----- Prometheus exporter port
    targetPort: 9090 # <----- Target port in the container
    name: prometheus # <----- Name for this port (optional, but good practice)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: vsdm2
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"

    exporters:
      prometheus:
        endpoint: "0.0.0.0:9090"
      otlp:
        endpoint: "jaeger-svc:4317"
        tls:
          insecure: true
      debug:
        verbosity: normal
  
    processors:
      batch:
    
    connectors:
      spanmetrics:
        histogram:
          explicit:
            buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms]
        dimensions:
          - name: http.method
            default: GET
          - name: http.status_code
        exemplars:
          enabled: true
        exclude_dimensions: ['status.code']
        dimensions_cache_size: 1000
        aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"    
        metrics_flush_interval: 15s
        metrics_expiration: 60m
        events:
          enabled: true
          dimensions:
            - name: exception.type
            - name: exception.message
        resource_metrics_key_attributes:
          - service.name
          - telemetry.sdk.language
          - telemetry.sdk.name
    
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]  # <-----  CRITICAL: batch processor IS in traces pipeline
          exporters: [spanmetrics, debug, otlp] # <----- CRITICAL: spanmetrics is in traces pipeline EXPORTERS (as connector)
        metrics:
          receivers: [spanmetrics, otlp]
          processors: [batch]
          exporters: [prometheus, debug]